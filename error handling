
@client.event
async def on_command_error(ctx, error):
    if isinstance(error, discord.ext.commands.CheckFailure):
        await ctx.message.add_reaction(emoji="âš ")
        embed = discord.Embed(color=0xff0000)
        embed.set_author(name=f'{error}')
        await ctx.send(embed=embed)
    if isinstance(error, discord.ext.commands.CommandNotFound):
        await ctx.message.add_reaction(emoji="âš ")
        embed = discord.Embed(
            color=0xff0000
        )
        embed.set_author(
            name=f"{error} on {client.user.name}.")
        await ctx.send(embed=embed)
    if isinstance(error, discord.ext.commands.BadArgument):
        await ctx.message.add_reaction(emoji="âš ")
        embed = discord.Embed(
            color=0xff0000
        )
        embed.set_author(
            name=f"{error}.")
        await ctx.send(embed=embed)
    if isinstance(error, discord.ext.commands.TooManyArguments):
        await ctx.message.add_reaction(emoji="âš ")
        embed = discord.Embed(
            color=0xff0000
        )
        await ctx.send(embed=embed)
    if isinstance(error, discord.ext.commands.MissingRequiredArgument):
        embed = discord.Embed(color=0xFF0000)
        embed.set_author(name=f'{error}')
        await ctx.send(embed=embed)

    if isinstance(error, discord.ext.commands.BotMissingPermissions):
        embed = discord.Embed(color=0xff0000)
        embed.set_author(name=f'{error}')
        await ctx.send(embed=embed)

    if isinstance(error, discord.ext.commands.NSFWChannelRequired):
        embed = discord.Embed(color=0xff0000)
        embed.set_author(name=f'{error}')
        await ctx.send(embed=embed)


@client.command()
async def testt(ctx):
    p = ctx.prefix
    preset = f"(Prefix for {ctx.guild.name}: {p})"
    a = discord.Embed(title="Welcome to CT5k bot support!", color=discord.Color.purple())
    a.set_image(url="https://images-ext-1.discordapp.net/external/6zcjoRqBVHUFK6XfFwe88EC-GyKbxGtnkQOnPfC1cV4/%3Fsize%3D1024"
            "/https/cdn.discordapp.com/avatars/697678160577429584/6e73f989ee6999b5f8c19afb0b8f28e9.webp?width=300"
            "&height=300")
    a.set_author(name="Developped by â™¿niz#7532", icon_url="https://images-ext-1.discordapp.net/external/qN_IxWp92VJp"
                                                          "TNBAittyy1n070Mm-s4DKeNjk_7eilw/%3Fsize%3D1024/https/cdn."
                                                          "discordapp.com/avatars/350349365937700864/e2e36ec20e4dcda79a"
                                                          "8175e92762c6d0.webp")
    b = discord.Embed(title="Bot Commands ðŸ¤–", description="General Bot Commands.", color=discord.Color.purple())
    b.add_field(name="help", value="Brings you here.", inline=False)
    b.add_field(name="ping", value="Finds out the bot's ping.", inline=False)
    b.add_field(name="about", value="Gives you some info about the bot.", inline=False)
    b.add_field(name="cogs", value="Shows you the bot's cogs.", inline=False)
    b.add_field(name="code", value="Gives you the amount of code needed to make this bot.", inline=False)
    b.add_field(name="nickname", value=f"Changes CyberTron5000's nickname. `{p}nickname [new nickname]`", inline=False)
    b.set_footer(text=preset)

    c = discord.Embed(title="Bot Commands ðŸ¤–", color=discord.Color.purple())
    c.add_field(name=f"sourcecode", value=f"Shows you the source code for a specific command. `{p}src [command]`", inline=False)
    c.add_field(name=f"eval", value=f"Evaluates an expression as if it was a Python Shell. `{p}eval [expression/code]`", inline=False)
    c.add_field(name=f"uptime", value=f"Tells you how long it has been since bot's last commit.", inline=False)
    c.set_footer(text=preset)

    d = discord.Embed(title="General/Fun Commands ðŸŽ‰", color=discord.Color.purple(), description="General commands")
    d.add_field(name="reply", value=f"Replies with what you said and deletes your message. `{p}reply [message]`", inline=False)
    d.add_field(name="askouija", value=f"Asks the mythical Ouija Board a question... `{p}askouija [question]`", inline=False)
    d.add_field(name="gayr8", value=f"Rates ur gayness. `{p}gayr8 [user or none]`", inline=False)
    d.add_field(name="coinflip", value=f"Flips a coin.", inline=False)
    d.add_field(name="spam", value=f"Spams a message. `{p}spam [message]`", inline=False)
    d.add_field(name="iq", value=f"Assesses your iq. `{p}iq [user or none]`", inline=False)
    d.set_footer(text=preset)

    e = discord.Embed(title="General/Fun Commands ðŸŽ‰", color=discord.Color.purple())
    e.add_field(name="fight", value=f"Fight people `{p}fight [person][weapon]`",
                inline=False)
    e.add_field(name="vote", value=f"Hold a vote. `{p}vote [poll]`",
                inline=False)
    e.add_field(name="echo", value=f"Echoes message in another channel. `{p}echo [channel][message]`", inline=False)
    e.add_field(name="who", value=f"Ask the bot about your peers. `{p}who [question]`", inline=False)
    e.add_field(name="avatar", value=f"Shows someone's avatar. `{p}av [user or none]`", inline=False)
    e.add_field(name="userinfo", value=f"Gives you someone's user info. `{p}ui [user or none]`", inline=False)
    e.set_footer(text=preset)

    f = discord.Embed(title="General/Fun Commands ðŸŽ‰", color=discord.Color.purple())
    f.add_field(name="emoji", value=f"No Nitro? No problem! `{p}emoji [emoji]`",
                inline=False)
    f.add_field(name="msg", value=f"Message a user via CyberTron5000. `{p}msg [user][message]`",
                inline=False)
    f.add_field(name="guildinfo", value=f"Gives you info about the guild.", inline=False)
    f.set_footer(text=preset)

    g = discord.Embed(title="Mod Commands <:bannedt:667529641673621504>", description="Take a wild guess.", color=discord.Color.purple())
    g.add_field(name="purge", value=f"Purges messages. `{p}purge [amount]`",
                inline=False)
    g.add_field(name="kick", value=f"Kicks a member. `{p}kick [member][optional reason]`",
                inline=False)
    g.add_field(name="ban", value=f"Bans a member. `{p}ban [member][optional reason]`", inline=False)
    g.add_field(name="unban", value=f"Unban member. `{p}unban [member]`", inline=False)
    g.set_footer(text=preset)

    h = discord.Embed(title="Reddit Commands <:reddit:703931951769190410>", description="Reddit commands!",
                      color=discord.Color.purple())
    h.add_field(name="redditstats", value=f"Shows you a redditor's stats. `{p}redditstats [redditor]`",
                inline=False)
    h.add_field(name="post", value=f"Get a post from a subreddit of your choosing. `{p}post [subreddit][optional sort]`",
                inline=False)
    h.add_field(name="food", value=f"Shows you food from some of Reddit's culinary subreddits.", inline=False)
    h.add_field(name="meme", value=f"Shows you a meme from some of Reddit's dankest places (and r/memes).", inline=False)
    h.set_footer(text=preset)
    embeds = [
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        h,
        discord.Embed(title="Have Fun!", color=discord.Color.purple())
    ]
    paginator = BotEmbedPaginator(ctx, embeds)
    await paginator.run()



@commands.command(aliases=['perms'])
    async def permissions(self, ctx):
        """Gets the permissions for user"""
        perms = []
        negperms = []
        permissions = ctx.channel.permissions_for(ctx.author)

        embed = discord.Embed(title=':customs:  Permissions', color=color, timestamp=ctx.message.created_at)
        embed.add_field(name='Server', value=ctx.guild)
        embed.add_field(name='Channel', value=ctx.channel, inline=False)

        for item, valueBool in permissions:
            if valueBool:
                value = ':white_check_mark:'
                perms.append(f'{value}{item}')
            else:
                value = ':x:'
                negperms.append(f'{value}{item}')

        embed.add_field(name='Allowed permissions', value='\n'.join(perms), inline=True)
        embed.add_field(name='Denied permissions', value='\n'.join(negperms), inline=True)

        await ctx.send(embed=embed)

--------------------
 itertools.islice(await ctx.send('{}'.format(moderator)),
                             3, None)


--------------------

    @commands.group(invoke_without_command=True)
    @commands.is_owner()
    async def notes(self, ctx, dude: discord.Member):
        try:
            db = sqlite3.connect("notes.sqlite")
            cursor = db.cursor()
            cursor.execute(f"SELECT note FROM notes WHERE user_id = {dude.id}")
            cursor1 = db.cursor()
            cursor1.execute(f"SELECT author_id FROM notes WHERE user_id = {dude.id}")
            result1 = cursor1.fetchone()
            result = cursor.fetchone()
            user = str(result[0])
            bruh = str(result1[0])
            await ctx.send(embed=discord.Embed(description=f"`Notes for {dude}`" + '\n\n' + user +
                                                           '\n\n' + f'> Written by <@!{bruh}>', color=0x00dcff))
        except Exception as error:
            await ctx.send(error)


    @notes.command()
    @commands.is_owner()
    async def write(self, ctx, user: discord.Member, *, note):
        author = ctx.message.author
        db = sqlite3.connect("notes.sqlite")
        cursor = db.cursor()
        cursor.execute(f"SELECT author_id, note FROM notes WHERE user_id = {user.id}")
        result = cursor.fetchone()
        if result is None:
            try:
                sql = "INSERT INTO notes(author_id, note, user_id) VALUES(?,?,?)"
                val = (author, note, user.id)
                cursor.execute(sql, val)
                db.commit()
                cursor.close()
                db.close()
                await ctx.message.add_reaction(emoji=":GreenTick:707950252434653184")
            except Exception as er:
                await ctx.send(er)
        elif result is not None:
            try:
                sql = "UPDATE notes SET author_id = ?, note = ? WHERE user_id = ?"
                val = (author, note, user.id)
                cursor.execute(sql, val)
                db.commit()
                cursor.close()
                db.close()
                await ctx.message.add_reaction(emoji=":GreenTick:707950252434653184")
            except Exception as er:
                await ctx.send(er)

class HelpPaginator(Pages):
    def __init__(self, help_command, ctx, entries, *, per_page=6):
        super().__init__(ctx, entries=entries, per_page=per_page)
        self.reaction_emojis.append(('\N{WHITE QUESTION MARK ORNAMENT}', self.show_bot_help))
        self.total = len(entries)
        self.help_command = help_command
        self.prefix = help_command.clean_prefix
        self.is_bot = False

    def get_bot_page(self, page):
        cog, description, commands = self.entries[page - 1]
        self.title = f'{cog} Commands'
        self.description = description
        return commands

    def prepare_embed(self, entries, page, *, first=False):
        self.embed.clear_fields()
        self.embed.description = self.description
        self.embed.title = self.title

        if self.is_bot:
            value = 'For more help, join the official bot support server: https://discord.gg/DWEaqMy'
            self.embed.add_field(name='Support', value=value, inline=False)

        self.embed.set_footer(text=f'Use "{self.prefix}help command" for more info on a command.')

        for entry in entries:
            signature = f'{entry.qualified_name} {entry.signature}'
            self.embed.add_field(name=signature, value=entry.short_doc or "No help given", inline=False)

        if self.maximum_pages:
            self.embed.set_author(name=f'Page {page}/{self.maximum_pages} ({self.total} commands)')

    async def show_help(self):
        """shows this message"""

        self.embed.title = 'Paginator help'
        self.embed.description = 'Hello! Welcome to the help page.'

        messages = [f'{emoji} {func.__doc__}' for emoji, func in self.reaction_emojis]
        self.embed.clear_fields()
        self.embed.add_field(name='What are these reactions for?', value='\n'.join(messages), inline=False)

        self.embed.set_footer(text=f'We were on page {self.current_page} before this message.')
        await self.message.edit(embed=self.embed)

        async def go_back_to_current_page():
            await asyncio.sleep(30.0)
            await self.show_current_page()

        self.bot.loop.create_task(go_back_to_current_page())

    async def show_bot_help(self):
        """shows how to use the bot"""

        self.embed.title = 'Using the bot'
        self.embed.description = 'Hello! Welcome to the help page.'
        self.embed.clear_fields()

        entries = (
            ('<argument>', 'This means the argument is __**required**__.'),
            ('[argument]', 'This means the argument is __**optional**__.'),
            ('[A|B]', 'This means that it can be __**either A or B**__.'),
            ('[argument...]', 'This means you can have multiple arguments.\n' \
                              'Now that you know the basics, it should be noted that...\n' \
                              '__**You do not type in the brackets!**__')
        )

        self.embed.add_field(name='How do I use this bot?', value='Reading the bot signature is pretty simple.')

        for name, value in entries:
            self.embed.add_field(name=name, value=value, inline=False)

        self.embed.set_footer(text=f'We were on page {self.current_page} before this message.')
        await self.message.edit(embed=self.embed)

        async def go_back_to_current_page():
            await asyncio.sleep(30.0)
            await self.show_current_page()

        self.bot.loop.create_task(go_back_to_current_page())


class PaginatedHelpCommand(commands.HelpCommand):
    def __init__(self):
        super().__init__(command_attrs={
            'cooldown': commands.Cooldown(1, 3.0, commands.BucketType.member),
            'help': 'Shows help about the bot, a command, or a category'
        })

    async def on_help_command_error(self, ctx, error):
        if isinstance(error, commands.CommandInvokeError):
            await ctx.send(str(error.original))

    def get_command_signature(self, command):
        parent = command.full_parent_name
        if len(command.aliases) > 0:
            aliases = '|'.join(command.aliases)
            fmt = f'[{command.name}|{aliases}]'
            if parent:
                fmt = f'{parent} {fmt}'
            alias = fmt
        else:
            alias = command.name if not parent else f'{parent} {command.name}'
        return f'{alias} {command.signature}'

    async def send_bot_help(self, mapping):
        def key(c):
            return c.cog_name or '\u200bNo Category'

        bot = self.context.bot
        entries = await self.filter_commands(bot.commands, sort=True, key=key)
        nested_pages = []
        per_page = 6
        total = 0

        for cog, commands in itertools.groupby(entries, key=key):
            commands = sorted(commands, key=lambda c: c.name)
            if len(commands) == 0:
                continue

            total += len(commands)
            actual_cog = bot.get_cog(cog)
            # get the description if it exists (and the cog is valid) or return Empty embed.
            description = (actual_cog and actual_cog.description) or discord.Embed.Empty
            nested_pages.extend((cog, description, commands[i:i + per_page]) for i in range(0, len(commands), per_page))

        # a value of 1 forces the pagination session
        pages = HelpPaginator(self, self.context, nested_pages, per_page=1)

        # swap the get_page implementation to work with our nested pages.
        pages.get_page = pages.get_bot_page
        pages.is_bot = True
        pages.total = total
        await self.context.release()
        await pages.paginate()

    async def send_cog_help(self, cog):
        entries = await self.filter_commands(cog.get_commands(), sort=True)
        pages = HelpPaginator(self, self.context, entries)
        pages.title = f'{cog.qualified_name} Commands'
        pages.description = cog.description

        await self.context.release()
        await pages.paginate()

    def common_command_formatting(self, page_or_embed, command):
        page_or_embed.title = self.get_command_signature(command)
        if command.description:
            page_or_embed.description = f'{command.description}\n\n{command.help}'
        else:
            page_or_embed.description = command.help or 'No help found...'

    async def send_command_help(self, command):
        # No pagination necessary for a single command.
        embed = discord.Embed(colour=discord.Colour.blurple())
        self.common_command_formatting(embed, command)
        await self.context.send(embed=embed)

    async def send_group_help(self, group):
        subcommands = group.commands
        if len(subcommands) == 0:
            return await self.send_command_help(group)

        entries = await self.filter_commands(subcommands, sort=True)
        pages = HelpPaginator(self, self.context, entries)
        self.common_command_formatting(pages, group)

        await self.context.release()
        await pages.paginate()


            async with aiohttp.ClientSession() as cs:
                async with cs.get(f'https://pokeapi.co/api/v2/pokemon/{pokemon}') as r:
                    res = await r.json()
                exp = res['base_experience']
                ability = res['abilities'][0]['ability']['name']
                ability2 = res['abilities'][0]['ability']['name']
                sprite = res['sprites']['front_default']
                embed = discord.Embed(color=colour, title=f"{pokemon.capitalize()} â€¢ #{res['id']}")
                embed.add_field(name="Abilities", value=f"â‰« **{ability}**\nâ‰« **{ability2}**")
                embed.set_thumbnail(url=sprite)
                await ctx.send(embed=embed)